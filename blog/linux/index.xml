<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Marcos&#39; Blog</title>
    <link>https://mpdesouza.com/blog/linux/</link>
    <description>Recent content in linux on Marcos&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2021, Marcos Paulo de Souza.</copyright>
    <lastBuildDate>Tue, 16 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mpdesouza.com/blog/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>btrfs: Differentiating bind mounts on subvolumes</title>
      <link>https://mpdesouza.com/btrfs-differentiating-bind-mounts-on-subvolumes/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mpdesouza.com/btrfs-differentiating-bind-mounts-on-subvolumes/</guid>
      <description>The btrfs inspect-internal logical-resolve command is used to find a file related to a logical-address. This can be useful when btrfs reports a corruption at an specific logical address, making it easy for the user to find the corrupted file. But, for all current users of openSUSE/SUSE Enterprise Linux, this command was failing as shown below:
btrfs inspect-internal logical-resolve 5085913088 / ERROR: cannot access &#39;//@/home&#39;: No such file or directory An openSUSE/SLE installation would create a set of subvolumes, starting from /@.</description>
    </item>
    
    <item>
      <title>btrfs: making &#34;send&#34; more &#34;capable&#34;</title>
      <link>https://mpdesouza.com/btrfs-making-send-more-capable/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mpdesouza.com/btrfs-making-send-more-capable/</guid>
      <description>The send/receive is a feature from btrfs where you can generate a stream of changes between two snapshots and then apply to any btrfs system, being a different disk on the host or over the network.
The receive feature receives a stream of data, applying the it in the filesystem. As the stream can be a file, it&amp;rsquo;s easy even to transfer the output of send over the network and receive in the other side.</description>
    </item>
    
    <item>
      <title>New btrfs feature: Delete subvolumes using subvolume ids</title>
      <link>https://mpdesouza.com/new-btrfs-feature-delete-subvolumes-using-subvolume-ids/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mpdesouza.com/new-btrfs-feature-delete-subvolumes-using-subvolume-ids/</guid>
      <description>Note: The kernel changes mentioned here should appear in Linux 5.6 since it&amp;rsquo;s currently in linux-next, and the patches related to btrfs-progs and xfstests are still waiting to be merged
btrfs is a very versatile filesystem, and it has a lot of features that don&amp;rsquo;t exist in any other mainline Linux filesystem. One of the key features of btrfs is the concept of subvolumes. A subvolume can be compared to a disk partition since each subvolume can contain it&amp;rsquo;s own filesystem tree and size limits.</description>
    </item>
    
    <item>
      <title>Kernel Adventures: Enabling VPD Pages for USB Storage Devices in sysfs</title>
      <link>https://mpdesouza.com/kernel-adventures-enabling-vpd-pages-for-usb-storage-devices-in-sysfs/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mpdesouza.com/kernel-adventures-enabling-vpd-pages-for-usb-storage-devices-in-sysfs/</guid>
      <description>After chasing the problem of rotational sysfs property of USB flash drives, I started to check another sysfs attributes of USB storage devices, and I noted two missing attributes: vpd_pg80 and vpd_pg83.
As explained here, VPD pages contain data related to the device. In special, page 80 is Unit Serial Number (sn) and page 83 is Device Information (di), which are present in any SCSI device that complies with SPC-2 or later.</description>
    </item>
    
    <item>
      <title>Kernel Adventures: Are USB Sticks Rotational Devices?</title>
      <link>https://mpdesouza.com/kernel-adventures-are-usb-sticks-rotational-devices/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mpdesouza.com/kernel-adventures-are-usb-sticks-rotational-devices/</guid>
      <description>A while ago I’ve found this kernel bug entry about USB mass storage being shown as a rotational device. This is wrong because a USB stick is a flash device, and does not rotate.
About rotational devices Let’s take a minute to discuss about the evolution from disk to flash storage.
Older storage devices, HDD in this example, were called Disk Storage because these devices recorded data into one or more rotating disks.</description>
    </item>
    
    <item>
      <title>NO_NEW_PRIVS: avoiding privilege escalation</title>
      <link>https://mpdesouza.com/no_new_privs-avoiding-privilege-escalation/</link>
      <pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mpdesouza.com/no_new_privs-avoiding-privilege-escalation/</guid>
      <description>Proposed in 2012, the NO_NEW_PRIVS flag made possible to any process to avoid privilege escalation when this behavior is not desired. After the flag is set, it persists across execve, clone and fork syscalls, and cannot be cleared. This can help you to avoid exploitation of vulnerable software, since the attacker will be running as an ordinary user.
The NO_NEW_PRIVS flag is already beeng used by some projects that try to make the running environment more secure, specially container engines and sandbox applications.</description>
    </item>
    
  </channel>
</rss>
